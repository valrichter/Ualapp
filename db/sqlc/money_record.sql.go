// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: money_record.sql

package db

import (
	"context"
)

const createMoneyRecord = `-- name: CreateMoneyRecord :one
INSERT INTO
    money_records (
        user_id, reference, status, amount
    )
VALUES ($1, $2, $3, $4) RETURNING id, user_id, reference, status, amount
`

type CreateMoneyRecordParams struct {
	UserID    int32  `json:"user_id"`
	Reference string `json:"reference"`
	Status    string `json:"status"`
	Amount    int64  `json:"amount"`
}

func (q *Queries) CreateMoneyRecord(ctx context.Context, arg CreateMoneyRecordParams) (MoneyRecord, error) {
	row := q.db.QueryRow(ctx, createMoneyRecord,
		arg.UserID,
		arg.Reference,
		arg.Status,
		arg.Amount,
	)
	var i MoneyRecord
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Reference,
		&i.Status,
		&i.Amount,
	)
	return i, err
}

const deleteMoneyRecordById = `-- name: DeleteMoneyRecordById :exec
DELETE FROM money_records WHERE id = $1
`

func (q *Queries) DeleteMoneyRecordById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteMoneyRecordById, id)
	return err
}

const getMoneyRecordByReference = `-- name: GetMoneyRecordByReference :one
SELECT id, user_id, reference, status, amount FROM money_records WHERE reference = $1
`

func (q *Queries) GetMoneyRecordByReference(ctx context.Context, reference string) (MoneyRecord, error) {
	row := q.db.QueryRow(ctx, getMoneyRecordByReference, reference)
	var i MoneyRecord
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Reference,
		&i.Status,
		&i.Amount,
	)
	return i, err
}

const getMoneyRecordsByStatus = `-- name: GetMoneyRecordsByStatus :many
SELECT id, user_id, reference, status, amount FROM money_records WHERE status = $1
`

func (q *Queries) GetMoneyRecordsByStatus(ctx context.Context, status string) ([]MoneyRecord, error) {
	rows, err := q.db.Query(ctx, getMoneyRecordsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MoneyRecord{}
	for rows.Next() {
		var i MoneyRecord
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Reference,
			&i.Status,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
